//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a T4 template.
//
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace HackerCup.Common.Data
{
    public class RangeUInt
    {
        private Tuple<uint, uint> _Range;

        public static RangeUInt Void = new RangeUInt(default(uint), default(uint));

        public uint Minimum { get { return _Range.Item1; } }

        public uint Maximum { get { return _Range.Item2; } }

        public uint Count { get { return Maximum - Minimum + 1; } }

        public RangeUInt(uint min, uint max)
        {
            _Range = new Tuple<uint, uint>(min, max);
        }

        public bool ContainsValue(uint value)
        {
			return Comparer<uint>.Default.Compare(Minimum, value) <= 0 &&
                Comparer<uint>.Default.Compare(value, Maximum) <= 0;
        }

        public bool IsInsideRange(RangeUInt range) =>
            range.ContainsValue(Minimum) && range.ContainsValue(Maximum);

        public bool ContainsRange(RangeUInt range) =>
            ContainsValue(range.Minimum) && ContainsValue(range.Maximum);

        public bool IsOverlapping(RangeUInt range) =>
            ContainsValue(range.Minimum) || ContainsValue(range.Maximum) ||
            range.ContainsValue(Minimum) || range.ContainsValue(Maximum);

		public RangeUInt Union(RangeUInt range)
        {
            if (!IsOverlapping(range))
                return Void;
            if (IsInsideRange(range))
                return range;
            if (ContainsRange(range))
                return this;
            return new RangeUInt(
                Comparer<uint>.Default.Compare(Minimum, range.Minimum) < 0 ?
                    Minimum : range.Minimum,
                Comparer<uint>.Default.Compare(Maximum, range.Maximum) > 0 ?
                    Maximum : range.Maximum);
        }

        public RangeUInt Intersect(RangeUInt range)
        {
            if (!IsOverlapping(range))
                return Void;
            if (IsInsideRange(range))
                return this;
            if (ContainsRange(range))
                return range;
            return new RangeUInt(
                Comparer<uint>.Default.Compare(Minimum, range.Minimum) < 0 ?
                    range.Minimum : Minimum,
                Comparer<uint>.Default.Compare(Maximum, range.Maximum) > 0 ?
                    range.Maximum : Maximum);
        }
    }
}
